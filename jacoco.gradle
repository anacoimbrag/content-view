apply plugin: 'org.sonarqube'
apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.8.5"
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

def fileFilter = [
        '**/R.class',
        '**/R$*.class',
        '**/*$ViewInjector*.*',
        '**/*$ViewBinder*.*',
        '**/BuildConfig.*',
        '**/Manifest*.*'
]

task codeCoverageReport(type: JacocoReport, dependsOn: 'testDebugUnitTest') {
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."
    def coverageSourceDirs = ["**/src/main/java/**/**"]
    def javaClasses = fileTree(dir: "$buildDir/tmp/kotlin-classes/debug", excludes: fileFilter)
    classDirectories.setFrom files([javaClasses])
    additionalSourceDirs.setFrom files(coverageSourceDirs)
    sourceDirectories.setFrom files(coverageSourceDirs)
    executionData.setFrom fileTree(dir: "$buildDir", includes: ["jacoco/testDebugUnitTest.exec"])
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

sonarqube {
    properties {
        property "sonar.host.url", "http://localhost:9000/"
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.projectKey", "myProject"
        property "sonar.projectName", "myProject"
        property "sonar.projectVersion", "V1.0"
        property "sonar.sources", "src/main/java"
        property "sonar.tests", ["src/test/java"]
        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.coverage.exclusions", "${fileFilter.join(',')}"
        property "sonar.jacoco.reportPaths", "${buildDir}/jacoco/testDebugUnitTest.exec"
        property "sonar.junit.reportsPath", "${buildDir}/test-results/testDebugUnitTest"
    }
}
